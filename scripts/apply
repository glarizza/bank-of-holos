#! /bin/bash

# cd to the repository root
TOPLEVEL="$(cd $(dirname "$0") && git rev-parse --show-toplevel)"
cd "$TOPLEVEL"

set -xeuo pipefail

apply() {
  local file="${1%.gen.yaml}.gen.yaml"
  local cluster="${2:-workload}"

  find "deploy/clusters/${cluster}" -name "${file}" \
    | xargs -I% -n1 bash -c 'test -s % && echo % || true' \
    | xargs -I% -n1 kubectl apply --server-side=true -f %
}

# Namespaces first
apply namespaces

# Custom Resource Definitions
apply argocd-crds
apply gateway-api
apply external-secrets-crds
kubectl wait --for=condition=Established crd --all --timeout=300s

# External Secrets
apply external-secrets
# Cert Manager (CRDs are included)
apply cert-manager
# Wait for cert manager to be available so we can manage the cluster issuer
kubectl wait --for=condition=Available deployment/cert-manager-webhook -n cert-manager --timeout=300s

# Manage the cluster issuer (local-ca)
apply local-ca
if ! kubectl wait --for=condition=Ready clusterissuer/local-ca --timeout=30s; then
  echo 'Did you forget to apply your local CA?  See: https://holos.run/docs/guides/local-cluster/#reset-the-cluster' >&2
  exit 1
fi

# ArgoCD
apply argocd
apply app-projects

# Istio
apply istio-base
apply istiod
apply istio-cni
if ! kubectl wait --for=condition=Ready pod -l k8s-app=istio-cni-node --timeout=300s -n istio-system; then
  echo 'istio-cni-node not ready, try: holos generate component istio-k3d' >&2
  exit 1
fi
apply istio-ztunnel
apply istio-gateway

exit 0

# Routes should be accepted, but all backends aren't valid yet.
kubectl apply --server-side=true -f deploy/clusters/local/components/httproutes/httproutes.gen.yaml

# Generate the private-key in-cluster.
kubectl apply --server-side=true -f deploy/clusters/local/components/bank-secrets/bank-secrets.gen.yaml
kubectl wait --for=condition=complete job.batch/jwt-key-writer -n bank-security --timeout=300s

# Bank Config
kubectl apply --server-side=true -f deploy/clusters/local/components/bank-backend-config/bank-backend-config.gen.yaml
# Bank Databases
kubectl apply --server-side=true -f deploy/clusters/local/components/bank-accounts-db/bank-accounts-db.gen.yaml
kubectl apply --server-side=true -f deploy/clusters/local/components/bank-ledger-db/bank-ledger-db.gen.yaml
# Bank Backend Services
kubectl apply --server-side=true -f deploy/clusters/local/components/bank-contacts/bank-contacts.gen.yaml
kubectl apply --server-side=true -f deploy/clusters/local/components/bank-balance-reader/bank-balance-reader.gen.yaml
kubectl apply --server-side=true -f deploy/clusters/local/components/bank-userservice/bank-userservice.gen.yaml
kubectl apply --server-side=true -f deploy/clusters/local/components/bank-ledger-writer/bank-ledger-writer.gen.yaml
kubectl apply --server-side=true -f deploy/clusters/local/components/bank-transaction-history/bank-transaction-history.gen.yaml
# Bank Frontend
kubectl apply --server-side=true -f deploy/clusters/local/components/bank-frontend/bank-frontend.gen.yaml

# ArgoCD Applications
kubectl apply --server-side=true -f deploy/clusters/local/gitops

exit 0

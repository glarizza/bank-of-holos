apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    application: bank-of-holos
    argocd.argoproj.io/instance: dev-bank-secrets
    environment: dev
    example.com/environment.name: dev
    example.com/owner.name: security
    example.com/tier.name: security
    holos.run/component.name: dev-bank-secrets
    team: security
    tier: security
  name: jwt-key-writer
  namespace: dev-bank-security
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    application: bank-of-holos
    argocd.argoproj.io/instance: dev-bank-secrets
    environment: dev
    example.com/environment.name: dev
    example.com/owner.name: security
    example.com/tier.name: security
    holos.run/component.name: dev-bank-secrets
    team: security
    tier: security
  name: jwt-key-reader
  namespace: dev-bank-security
rules:
- apiGroups:
  - ""
  resourceNames:
  - jwt-key
  resources:
  - secrets
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    application: bank-of-holos
    argocd.argoproj.io/instance: dev-bank-secrets
    environment: dev
    example.com/environment.name: dev
    example.com/owner.name: security
    example.com/tier.name: security
    holos.run/component.name: dev-bank-secrets
    team: security
    tier: security
  name: jwt-key-writer
  namespace: dev-bank-security
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - create
  - update
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    application: bank-of-holos
    argocd.argoproj.io/instance: dev-bank-secrets
    environment: dev
    example.com/environment.name: dev
    example.com/owner.name: security
    example.com/tier.name: security
    holos.run/component.name: dev-bank-secrets
    team: security
    tier: security
  name: jwt-key-reader
  namespace: dev-bank-security
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: jwt-key-reader
subjects:
- kind: ServiceAccount
  name: bank-of-holos
  namespace: dev-bank-frontend
- kind: ServiceAccount
  name: bank-of-holos
  namespace: dev-bank-backend
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    application: bank-of-holos
    argocd.argoproj.io/instance: dev-bank-secrets
    environment: dev
    example.com/environment.name: dev
    example.com/owner.name: security
    example.com/tier.name: security
    holos.run/component.name: dev-bank-secrets
    team: security
    tier: security
  name: jwt-key-writer
  namespace: dev-bank-security
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: jwt-key-writer
subjects:
- kind: ServiceAccount
  name: jwt-key-writer
  namespace: dev-bank-security
---
apiVersion: v1
data:
  entrypoint: |-
    #! /bin/bash
    #

    tmpdir="$(mktemp -d)"
    finish() {
      status=$?
      rm -rf "${tmpdir}"
      return $status
    }
    trap finish EXIT

    set -euo pipefail

    cd "$tmpdir"
    mkdir secret
    cd secret

    echo "generating private key" >&2
    ssh-keygen -t rsa -b 4096 -m PEM -f jwtRS256.key -q -N "" -C bank-of-holos
    echo "generating public key" >&2
    ssh-keygen -e -m PKCS8 -f jwtRS256.key > jwtRS256.key.pub
    cd ..

    echo "copying secret into kubernetes manifest secret.yaml" >&2
    kubectl create secret generic jwt-key --from-file=secret --dry-run=client -o yaml > secret.yaml

    echo "applying secret.yaml" >&2
    kubectl apply --server-side=true -f secret.yaml

    echo "cleaning up" >&2
    rm -rf secret secret.yaml

    echo "ok done" >&2
kind: ConfigMap
metadata:
  labels:
    application: bank-of-holos
    argocd.argoproj.io/instance: dev-bank-secrets
    environment: dev
    example.com/environment.name: dev
    example.com/owner.name: security
    example.com/tier.name: security
    holos.run/component.name: dev-bank-secrets
    team: security
    tier: security
  name: jwt-key-writer
  namespace: dev-bank-security
---
apiVersion: batch/v1
kind: Job
metadata:
  labels:
    application: bank-of-holos
    argocd.argoproj.io/instance: dev-bank-secrets
    environment: dev
    example.com/environment.name: dev
    example.com/owner.name: security
    example.com/tier.name: security
    holos.run/component.name: dev-bank-secrets
    team: security
    tier: security
  name: jwt-key-writer
  namespace: dev-bank-security
spec:
  template:
    metadata:
      labels:
        application: bank-of-holos
        argocd.argoproj.io/instance: dev-bank-secrets
        environment: dev
        example.com/environment.name: dev
        example.com/owner.name: security
        example.com/tier.name: security
        holos.run/component.name: dev-bank-secrets
        team: security
        tier: security
    spec:
      containers:
      - args:
        - /config/entrypoint
        command:
        - /bin/bash
        env:
        - name: HOME
          value: /tmp
        image: quay.io/holos-run/toolkit:2024-09-16
        name: toolkit
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - mountPath: /config
          name: config
          readOnly: true
      restartPolicy: OnFailure
      securityContext:
        runAsNonRoot: true
        runAsUser: 8192
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: jwt-key-writer
      volumes:
      - configMap:
          name: jwt-key-writer
        name: config

apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    application: bank-of-holos
    argocd.argoproj.io/instance: stage-bank-secrets
    environment: stage
    example.com/environment.name: stage
    example.com/owner.name: security
    example.com/tier.name: foundation
    holos.run/component.name: stage-bank-secrets
    team: security
    tier: foundation
  name: jwt-key-writer
  namespace: stage-bank-security
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    application: bank-of-holos
    argocd.argoproj.io/instance: stage-bank-secrets
    environment: stage
    example.com/environment.name: stage
    example.com/owner.name: security
    example.com/tier.name: foundation
    holos.run/component.name: stage-bank-secrets
    team: security
    tier: foundation
  name: jwt-key-reader
  namespace: stage-bank-security
rules:
- apiGroups:
  - ""
  resourceNames:
  - jwt-key
  - demo-data-config
  resources:
  - secrets
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    application: bank-of-holos
    argocd.argoproj.io/instance: stage-bank-secrets
    environment: stage
    example.com/environment.name: stage
    example.com/owner.name: security
    example.com/tier.name: foundation
    holos.run/component.name: stage-bank-secrets
    team: security
    tier: foundation
  name: jwt-key-writer
  namespace: stage-bank-security
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - create
  - update
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    application: bank-of-holos
    argocd.argoproj.io/instance: stage-bank-secrets
    environment: stage
    example.com/environment.name: stage
    example.com/owner.name: security
    example.com/tier.name: foundation
    holos.run/component.name: stage-bank-secrets
    team: security
    tier: foundation
  name: jwt-key-reader
  namespace: stage-bank-security
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: jwt-key-reader
subjects:
- kind: ServiceAccount
  name: bank-of-holos
  namespace: stage-bank-frontend
- kind: ServiceAccount
  name: bank-of-holos
  namespace: stage-bank-backend
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    application: bank-of-holos
    argocd.argoproj.io/instance: stage-bank-secrets
    environment: stage
    example.com/environment.name: stage
    example.com/owner.name: security
    example.com/tier.name: foundation
    holos.run/component.name: stage-bank-secrets
    team: security
    tier: foundation
  name: jwt-key-writer
  namespace: stage-bank-security
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: jwt-key-writer
subjects:
- kind: ServiceAccount
  name: jwt-key-writer
  namespace: stage-bank-security
---
apiVersion: v1
data:
  entrypoint: "#! /bin/bash\n#\n# Generate a secret containing a random password instead
    of the hard-coded\n# password used at \n# https://github.com/GoogleCloudPlatform/bank-of-anthos/blob/v0.6.5/src/accounts/accounts-db/initdb/1-load-testdata.sh#L102\n\ntmpdir=\"$(mktemp
    -d)\"\nfinish() {\n  status=$?\n  rm -rf \"${tmpdir}\"\n  return $status\n}\ntrap
    finish EXIT\n\nset -euo pipefail\n\ncd \"$tmpdir\"\nmkdir secret\ncd secret\n\nexport
    LC_ALL=C\n\n# Secure replacement for https://github.com/GoogleCloudPlatform/bank-of-anthos/blob/v0.6.5/kubernetes-manifests/config.yaml#L39-L42\necho
    -n 'True' > USE_DEMO_DATA\necho -n testuser > DEMO_LOGIN_USERNAME\n\necho \"generating
    DEMO_LOGIN_PASSWORD\" >&2\nexport DEMO_LOGIN_PASSWORD=\"$(tr -dc A-Za-z0-9 </dev/urandom
    | head -c 20)\"\necho -n \"$DEMO_LOGIN_PASSWORD\" > DEMO_LOGIN_PASSWORD\n\necho
    \"bcrypt hashing DEMO_LOGIN_PASSWORD\" >&2\npython3 -c \"import bcrypt; import
    os; print(bcrypt.hashpw(os.getenv('DEMO_LOGIN_PASSWORD').encode('utf-8'), bcrypt.gensalt()).decode())\"
    > DEFAULT_PASSHASH\n\ncd ..\n\necho \"copying secret into kubernetes manifest
    secret.yaml\" >&2\nkubectl create secret generic demo-data-config --from-file=secret
    --dry-run=client -o yaml > secret.yaml\n\necho \"applying secret.yaml\" >&2\nkubectl
    apply --server-side=true -f secret.yaml\n\necho \"cleaning up\" >&2\nrm -rf secret
    secret.yaml\n\necho \"ok done\" >&2\n"
kind: ConfigMap
metadata:
  labels:
    application: bank-of-holos
    argocd.argoproj.io/instance: stage-bank-secrets
    environment: stage
    example.com/environment.name: stage
    example.com/owner.name: security
    example.com/tier.name: foundation
    holos.run/component.name: stage-bank-secrets
    team: security
    tier: foundation
  name: demo-data-config
  namespace: stage-bank-security
---
apiVersion: v1
data:
  entrypoint: |-
    #! /bin/bash
    #

    tmpdir="$(mktemp -d)"
    finish() {
      status=$?
      rm -rf "${tmpdir}"
      return $status
    }
    trap finish EXIT

    set -euo pipefail

    cd "$tmpdir"
    mkdir secret
    cd secret

    echo "generating private key" >&2
    ssh-keygen -t rsa -b 4096 -m PEM -f jwtRS256.key -q -N "" -C bank-of-holos
    echo "generating public key" >&2
    ssh-keygen -e -m PKCS8 -f jwtRS256.key > jwtRS256.key.pub
    cd ..

    echo "copying secret into kubernetes manifest secret.yaml" >&2
    kubectl create secret generic jwt-key --from-file=secret --dry-run=client -o yaml > secret.yaml

    echo "applying secret.yaml" >&2
    kubectl apply --server-side=true -f secret.yaml

    echo "cleaning up" >&2
    rm -rf secret secret.yaml

    echo "ok done" >&2
kind: ConfigMap
metadata:
  labels:
    application: bank-of-holos
    argocd.argoproj.io/instance: stage-bank-secrets
    environment: stage
    example.com/environment.name: stage
    example.com/owner.name: security
    example.com/tier.name: foundation
    holos.run/component.name: stage-bank-secrets
    team: security
    tier: foundation
  name: jwt-key-writer
  namespace: stage-bank-security
---
apiVersion: batch/v1
kind: Job
metadata:
  labels:
    application: bank-of-holos
    argocd.argoproj.io/instance: stage-bank-secrets
    environment: stage
    example.com/environment.name: stage
    example.com/owner.name: security
    example.com/tier.name: foundation
    holos.run/component.name: stage-bank-secrets
    team: security
    tier: foundation
  name: demo-data-config
  namespace: stage-bank-security
spec:
  template:
    metadata:
      labels:
        application: bank-of-holos
        argocd.argoproj.io/instance: stage-bank-secrets
        environment: stage
        example.com/environment.name: stage
        example.com/owner.name: security
        example.com/tier.name: foundation
        holos.run/component.name: stage-bank-secrets
        team: security
        tier: foundation
    spec:
      containers:
      - args:
        - /config/entrypoint
        command:
        - /bin/bash
        env:
        - name: HOME
          value: /tmp
        image: quay.io/holos-run/toolkit:2024-10-19
        name: toolkit
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - mountPath: /config
          name: config
          readOnly: true
      restartPolicy: OnFailure
      securityContext:
        runAsNonRoot: true
        runAsUser: 8192
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: jwt-key-writer
      volumes:
      - configMap:
          name: demo-data-config
        name: config
---
apiVersion: batch/v1
kind: Job
metadata:
  labels:
    application: bank-of-holos
    argocd.argoproj.io/instance: stage-bank-secrets
    environment: stage
    example.com/environment.name: stage
    example.com/owner.name: security
    example.com/tier.name: foundation
    holos.run/component.name: stage-bank-secrets
    team: security
    tier: foundation
  name: jwt-key-writer
  namespace: stage-bank-security
spec:
  template:
    metadata:
      labels:
        application: bank-of-holos
        argocd.argoproj.io/instance: stage-bank-secrets
        environment: stage
        example.com/environment.name: stage
        example.com/owner.name: security
        example.com/tier.name: foundation
        holos.run/component.name: stage-bank-secrets
        team: security
        tier: foundation
    spec:
      containers:
      - args:
        - /config/entrypoint
        command:
        - /bin/bash
        env:
        - name: HOME
          value: /tmp
        image: quay.io/holos-run/toolkit:2024-10-19
        name: toolkit
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - mountPath: /config
          name: config
          readOnly: true
      restartPolicy: OnFailure
      securityContext:
        runAsNonRoot: true
        runAsUser: 8192
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: jwt-key-writer
      volumes:
      - configMap:
          name: jwt-key-writer
        name: config

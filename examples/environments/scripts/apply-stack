#! /bin/bash

# cd to the repository root
TOPLEVEL="$(cd $(dirname "$0") && git rev-parse --show-toplevel)"
cd "${TOPLEVEL}/examples/environments"

set -xeuo pipefail

## Bank Prod

apply() {
  local stack
  stack="$1"
  # GitOps
  find deploy/clusters/workload/gitops -name "${stack}-*.yaml" | xargs -n1 kubectl apply --force-conflicts=true --server-side=true -f

  # Foundation
  kubectl apply --force-conflicts=true --server-side=true -f deploy/clusters/workload/components/${stack}-bank-namespaces/${stack}-bank-namespaces.gen.yaml
  kubectl apply --force-conflicts=true --server-side=true -f deploy/clusters/workload/components/${stack}-bank-projects/${stack}-bank-projects.gen.yaml
  # Secrets
  kubectl apply --force-conflicts=true --server-side=true -f deploy/clusters/workload/components/${stack}-bank-secrets/${stack}-bank-secrets.gen.yaml
  # Bank Config
  kubectl apply --force-conflicts=true --server-side=true -f deploy/clusters/workload/components/${stack}-bank-backend-config/${stack}-bank-backend-config.gen.yaml
  # Bank Databases
  kubectl apply --force-conflicts=true --server-side=true -f deploy/clusters/workload/components/${stack}-bank-accounts-db/${stack}-bank-accounts-db.gen.yaml
  kubectl apply --force-conflicts=true --server-side=true -f deploy/clusters/workload/components/${stack}-bank-ledger-db/${stack}-bank-ledger-db.gen.yaml
  # Bank Backend Services
  kubectl apply --force-conflicts=true --server-side=true -f deploy/clusters/workload/components/${stack}-bank-contacts/${stack}-bank-contacts.gen.yaml
  kubectl apply --force-conflicts=true --server-side=true -f deploy/clusters/workload/components/${stack}-bank-balance-reader/${stack}-bank-balance-reader.gen.yaml
  kubectl apply --force-conflicts=true --server-side=true -f deploy/clusters/workload/components/${stack}-bank-userservice/${stack}-bank-userservice.gen.yaml
  kubectl apply --force-conflicts=true --server-side=true -f deploy/clusters/workload/components/${stack}-bank-ledger-writer/${stack}-bank-ledger-writer.gen.yaml
  kubectl apply --force-conflicts=true --server-side=true -f deploy/clusters/workload/components/${stack}-bank-transaction-history/${stack}-bank-transaction-history.gen.yaml
  # Bank Frontend
  kubectl apply --force-conflicts=true --server-side=true -f deploy/clusters/workload/components/${stack}-bank-frontend/${stack}-bank-frontend.gen.yaml
  # Routes
  kubectl apply --force-conflicts=true --server-side=true -f deploy/clusters/workload/components/${stack}-bank-routes/${stack}-bank-routes.gen.yaml
  set +x
  echo "🌐 https://argocd.holos.localhost/" >&2
  set -x
  # Wait
  if [[ -z "${NO_WAIT:-}" ]]; then
    kubectl wait --for=condition=Available deployment/ledgerwriter deployment/transactionhistory deployment/balancereader -n ${stack}-bank-backend --timeout=300s
  fi
}

apply "$1"

exit 0

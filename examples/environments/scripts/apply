#! /bin/bash

# cd to the repository root
TOPLEVEL="$(cd $(dirname "$0") && git rev-parse --show-toplevel)"
cd "${TOPLEVEL}/examples/environments"

set -xeuo pipefail

apply() {
  kubectl apply --server-side=true -f "$1"
}

# Namespaces first
kubectl apply --server-side=true -f deploy/clusters/workload/components/namespaces/namespaces.gen.yaml

# Custom Resource Definitions
kubectl apply --server-side=true -f deploy/clusters/workload/components/argocd-crds/argocd-crds.gen.yaml
kubectl apply --server-side=true -f deploy/clusters/workload/components/gateway-api/gateway-api.gen.yaml
kubectl apply --server-side=true -f deploy/clusters/workload/components/external-secrets-crds/external-secrets-crds.gen.yaml
kubectl wait --for=condition=Established crd --all --timeout=300s

# External Secrets
kubectl apply --server-side=true -f deploy/clusters/workload/components/external-secrets/external-secrets.gen.yaml

# Cert Manager (CRDs are included)
kubectl apply --server-side=true -f deploy/clusters/workload/components/cert-manager/cert-manager.gen.yaml
# Wait for cert manager to be available so we can manage the cluster issuer
kubectl wait --for=condition=Available deployment/cert-manager-webhook -n cert-manager --timeout=300s
# Manage the cluster issuer
kubectl apply --server-side=true -f deploy/clusters/workload/components/local-ca/local-ca.gen.yaml
if ! kubectl wait --for=condition=Ready clusterissuer/local-ca --timeout=30s; then
  echo 'Did you forget to apply your local CA?  See: https://holos.run/docs/guides/local-cluster/#reset-the-cluster' >&2
  exit 1
fi

# ArgoCD
kubectl apply --server-side=true -f deploy/clusters/workload/components/argocd/argocd.gen.yaml
# We need to add all app projects before Applications
kubectl apply --server-side=true -f deploy/clusters/workload/components/app-projects/app-projects.gen.yaml
find deploy -type d | grep -- -projects | xargs -n1 kubectl apply --server-side=true -f

# Istio ()
kubectl apply --server-side=true -f deploy/clusters/workload/components/istio-base/istio-base.gen.yaml
kubectl apply --server-side=true -f deploy/clusters/workload/components/istiod/istiod.gen.yaml
kubectl apply --server-side=true -f deploy/clusters/workload/components/istio-cni/istio-cni.gen.yaml
if ! kubectl wait --for=condition=Ready pod -l k8s-app=istio-cni-node --timeout=300s -n istio-system; then
  echo 'istio-cni-node not ready, try: holos generate component istio-k3d' >&2
  exit 1
fi
kubectl apply --server-side=true -f deploy/clusters/workload/components/istio-ztunnel/istio-ztunnel.gen.yaml
kubectl apply --server-side=true -f deploy/clusters/workload/components/istio-gateway/istio-gateway.gen.yaml

# Routes should be accepted, but all backends aren't valid yet.
apply deploy/clusters/workload/components/httproutes/httproutes.gen.yaml

# ArgoCD Applications
apply deploy/clusters/workload/gitops

# Wait for ExternalSecrets to be ready
kubectl wait --for=condition=Available deployment/external-secrets-webhook -n external-secrets --timeout=300s

exit 0
